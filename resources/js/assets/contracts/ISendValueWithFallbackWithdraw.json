{
  "contractName": "ISendValueWithFallbackWithdraw",
  "abi": [
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"Allows a user to manually withdraw funds which originally failed to transfer.\"}},\"notice\":\"Attempt to send ETH and if the transfer fails or runs out of gas, store the balance for future withdrawal instead.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/minted/interfaces/ISendValueWithFallbackWithdraw.sol\":\"ISendValueWithFallbackWithdraw\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/minted/interfaces/ISendValueWithFallbackWithdraw.sol\":{\"keccak256\":\"0xb93ea5993400b9f1d27c714d1c8d5b983b0b1fca99621eda2afcc6778db600e5\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://bc9a4ea5c51703a8e7459c29d7636c847bc82d10ddf9ef894e83f5852b079ac7\",\"dweb:/ipfs/QmZHQeGSxG12hAEVzaP5SemBD5i8ioNgVR3AesW2zCSUMb\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT OR Apache-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Attempt to send ETH and if the transfer fails or runs out of gas, store the balance\r\n * for future withdrawal instead.\r\n */\r\ninterface ISendValueWithFallbackWithdraw {\r\n  /**\r\n   * @notice Allows a user to manually withdraw funds which originally failed to transfer.\r\n   */\r\n  function withdraw() external;\r\n}",
  "sourcePath": "C:\\alex\\nft\\openZeppelin\\mintedBasic\\contracts\\minted\\interfaces\\ISendValueWithFallbackWithdraw.sol",
  "ast": {
    "absolutePath": "project:/contracts/minted/interfaces/ISendValueWithFallbackWithdraw.sol",
    "exportedSymbols": {
      "ISendValueWithFallbackWithdraw": [
        4764
      ]
    },
    "id": 4765,
    "license": "MIT OR Apache-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4758,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "49:23:29"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ISendValueWithFallbackWithdraw",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4759,
          "nodeType": "StructuredDocumentation",
          "src": "76:139:29",
          "text": " @notice Attempt to send ETH and if the transfer fails or runs out of gas, store the balance\n for future withdrawal instead."
        },
        "fullyImplemented": false,
        "id": 4764,
        "linearizedBaseContracts": [
          4764
        ],
        "name": "ISendValueWithFallbackWithdraw",
        "nameLocation": "227:30:29",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 4760,
              "nodeType": "StructuredDocumentation",
              "src": "263:102:29",
              "text": " @notice Allows a user to manually withdraw funds which originally failed to transfer."
            },
            "functionSelector": "3ccfd60b",
            "id": 4763,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "378:8:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "386:2:29"
            },
            "returnParameters": {
              "id": 4762,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "397:0:29"
            },
            "scope": 4764,
            "src": "369:29:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4765,
        "src": "217:184:29",
        "usedErrors": []
      }
    ],
    "src": "49:352:29"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/minted/interfaces/ISendValueWithFallbackWithdraw.sol",
    "exportedSymbols": {
      "ISendValueWithFallbackWithdraw": [
        4764
      ]
    },
    "id": 4765,
    "license": "MIT OR Apache-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4758,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "49:23:29"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ISendValueWithFallbackWithdraw",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4759,
          "nodeType": "StructuredDocumentation",
          "src": "76:139:29",
          "text": " @notice Attempt to send ETH and if the transfer fails or runs out of gas, store the balance\n for future withdrawal instead."
        },
        "fullyImplemented": false,
        "id": 4764,
        "linearizedBaseContracts": [
          4764
        ],
        "name": "ISendValueWithFallbackWithdraw",
        "nameLocation": "227:30:29",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 4760,
              "nodeType": "StructuredDocumentation",
              "src": "263:102:29",
              "text": " @notice Allows a user to manually withdraw funds which originally failed to transfer."
            },
            "functionSelector": "3ccfd60b",
            "id": 4763,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "378:8:29",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4761,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "386:2:29"
            },
            "returnParameters": {
              "id": 4762,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "397:0:29"
            },
            "scope": 4764,
            "src": "369:29:29",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4765,
        "src": "217:184:29",
        "usedErrors": []
      }
    ],
    "src": "49:352:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.9+commit.e5eed63a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-03-15T19:40:04.821Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "Allows a user to manually withdraw funds which originally failed to transfer."
      }
    },
    "notice": "Attempt to send ETH and if the transfer fails or runs out of gas, store the balance for future withdrawal instead.",
    "version": 1
  }
}