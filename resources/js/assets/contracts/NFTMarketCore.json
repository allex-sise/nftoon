{
  "contractName": "NFTMarketCore",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A place for common modifiers and functions used by various NFTMarket mixins, if any.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/minted/mixins/NFTMarketCore.sol\":\"NFTMarketCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://038cad5fc2950820d94eead6323b56c3b95442aaa91a62c648fbde3256208ef5\",\"dweb:/ipfs/QmUkfnMmgc5gt6Dj99TkYEwUuRcPqBpm4qnxb71mqj6Qep\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c2746f8ebb4bfb6b8e8a768296c7f85f11b36f4873daabb91933c3602f00590\",\"dweb:/ipfs/QmdumDez8WEdk9FDuP7Jp5pDSJiQeFtFSJw3B5CEHJL4KU\"]},\"project:/contracts/minted/mixins/NFTMarketCore.sol\":{\"keccak256\":\"0x88fbf6189b9dced5cd893e999ba464ed18400c13dc6b0b5be04b1cb708c41c0f\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://0bf4b4672437b9edd2e972c10fddbb73a40112e848db8d0615baee4354cbc329\",\"dweb:/ipfs/QmZrbHgyXTHsGafdS8fRy8dYQjpYin6rifa8B8n2DFLfXM\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT OR Apache-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\n\r\n/**\r\n * @notice A place for common modifiers and functions used by various NFTMarket mixins, if any.\r\n * @dev This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree.\r\n */\r\nabstract contract NFTMarketCore {\r\n  /**\r\n   * @dev If the auction did not have an escrowed seller to return, this falls back to return the current owner.\r\n   * This allows functions to calculate the correct fees before the NFT has been listed in auction.\r\n   */\r\n  function _getSellerFor(address nftContract, uint256 tokenId) internal view virtual returns (address) {\r\n    return IERC721Upgradeable(nftContract).ownerOf(tokenId);\r\n  }\r\n\r\n  // 50 slots were consumed by adding ReentrancyGuardUpgradeable\r\n  uint256[950] private ______gap;\r\n}",
  "sourcePath": "C:\\alex\\nft\\openZeppelin\\mintedBasic\\contracts\\minted\\mixins\\NFTMarketCore.sol",
  "ast": {
    "absolutePath": "project:/contracts/minted/mixins/NFTMarketCore.sol",
    "exportedSymbols": {
      "IERC165Upgradeable": [
        2435
      ],
      "IERC721Upgradeable": [
        1491
      ],
      "NFTMarketCore": [
        5106
      ]
    },
    "id": 5107,
    "license": "MIT OR Apache-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5081,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "49:23:36"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "id": 5082,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5107,
        "sourceUnit": 1492,
        "src": "76:81:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "NFTMarketCore",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5083,
          "nodeType": "StructuredDocumentation",
          "src": "161:210:36",
          "text": " @notice A place for common modifiers and functions used by various NFTMarket mixins, if any.\n @dev This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree."
        },
        "fullyImplemented": true,
        "id": 5106,
        "linearizedBaseContracts": [
          5106
        ],
        "name": "NFTMarketCore",
        "nameLocation": "391:13:36",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5100,
              "nodeType": "Block",
              "src": "740:68:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 5097,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5088,
                        "src": "794:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 5094,
                            "name": "nftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5086,
                            "src": "773:11:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 5093,
                          "name": "IERC721Upgradeable",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1491,
                          "src": "754:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC721Upgradeable_$1491_$",
                            "typeString": "type(contract IERC721Upgradeable)"
                          }
                        },
                        "id": 5095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "754:31:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC721Upgradeable_$1491",
                          "typeString": "contract IERC721Upgradeable"
                        }
                      },
                      "id": 5096,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1424,
                      "src": "754:39:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view external returns (address)"
                      }
                    },
                    "id": 5098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "754:48:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 5092,
                  "id": 5099,
                  "nodeType": "Return",
                  "src": "747:55:36"
                }
              ]
            },
            "documentation": {
              "id": 5084,
              "nodeType": "StructuredDocumentation",
              "src": "410:225:36",
              "text": " @dev If the auction did not have an escrowed seller to return, this falls back to return the current owner.\n This allows functions to calculate the correct fees before the NFT has been listed in auction."
            },
            "id": 5101,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getSellerFor",
            "nameLocation": "648:13:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5086,
                  "mutability": "mutable",
                  "name": "nftContract",
                  "nameLocation": "670:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "662:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5085,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5088,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "691:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "683:15:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5087,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "683:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "661:38:36"
            },
            "returnParameters": {
              "id": 5092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5091,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "731:7:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5090,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "730:9:36"
            },
            "scope": 5106,
            "src": "639:169:36",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 5105,
            "mutability": "mutable",
            "name": "______gap",
            "nameLocation": "901:9:36",
            "nodeType": "VariableDeclaration",
            "scope": 5106,
            "src": "880:30:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$950_storage",
              "typeString": "uint256[950]"
            },
            "typeName": {
              "baseType": {
                "id": 5102,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "880:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 5104,
              "length": {
                "hexValue": "393530",
                "id": 5103,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "888:3:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_950_by_1",
                  "typeString": "int_const 950"
                },
                "value": "950"
              },
              "nodeType": "ArrayTypeName",
              "src": "880:12:36",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$950_storage_ptr",
                "typeString": "uint256[950]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 5107,
        "src": "373:541:36",
        "usedErrors": []
      }
    ],
    "src": "49:865:36"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/minted/mixins/NFTMarketCore.sol",
    "exportedSymbols": {
      "IERC165Upgradeable": [
        2435
      ],
      "IERC721Upgradeable": [
        1491
      ],
      "NFTMarketCore": [
        5106
      ]
    },
    "id": 5107,
    "license": "MIT OR Apache-2.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5081,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "49:23:36"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
        "id": 5082,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5107,
        "sourceUnit": 1492,
        "src": "76:81:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "NFTMarketCore",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5083,
          "nodeType": "StructuredDocumentation",
          "src": "161:210:36",
          "text": " @notice A place for common modifiers and functions used by various NFTMarket mixins, if any.\n @dev This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree."
        },
        "fullyImplemented": true,
        "id": 5106,
        "linearizedBaseContracts": [
          5106
        ],
        "name": "NFTMarketCore",
        "nameLocation": "391:13:36",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5100,
              "nodeType": "Block",
              "src": "740:68:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 5097,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5088,
                        "src": "794:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 5094,
                            "name": "nftContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5086,
                            "src": "773:11:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 5093,
                          "name": "IERC721Upgradeable",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1491,
                          "src": "754:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC721Upgradeable_$1491_$",
                            "typeString": "type(contract IERC721Upgradeable)"
                          }
                        },
                        "id": 5095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "754:31:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC721Upgradeable_$1491",
                          "typeString": "contract IERC721Upgradeable"
                        }
                      },
                      "id": 5096,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1424,
                      "src": "754:39:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view external returns (address)"
                      }
                    },
                    "id": 5098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "754:48:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 5092,
                  "id": 5099,
                  "nodeType": "Return",
                  "src": "747:55:36"
                }
              ]
            },
            "documentation": {
              "id": 5084,
              "nodeType": "StructuredDocumentation",
              "src": "410:225:36",
              "text": " @dev If the auction did not have an escrowed seller to return, this falls back to return the current owner.\n This allows functions to calculate the correct fees before the NFT has been listed in auction."
            },
            "id": 5101,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getSellerFor",
            "nameLocation": "648:13:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5086,
                  "mutability": "mutable",
                  "name": "nftContract",
                  "nameLocation": "670:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "662:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5085,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5088,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "691:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "683:15:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5087,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "683:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "661:38:36"
            },
            "returnParameters": {
              "id": 5092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5091,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5101,
                  "src": "731:7:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5090,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "730:9:36"
            },
            "scope": 5106,
            "src": "639:169:36",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 5105,
            "mutability": "mutable",
            "name": "______gap",
            "nameLocation": "901:9:36",
            "nodeType": "VariableDeclaration",
            "scope": 5106,
            "src": "880:30:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$950_storage",
              "typeString": "uint256[950]"
            },
            "typeName": {
              "baseType": {
                "id": 5102,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "880:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 5104,
              "length": {
                "hexValue": "393530",
                "id": 5103,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "888:3:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_950_by_1",
                  "typeString": "int_const 950"
                },
                "value": "950"
              },
              "nodeType": "ArrayTypeName",
              "src": "880:12:36",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$950_storage_ptr",
                "typeString": "uint256[950]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 5107,
        "src": "373:541:36",
        "usedErrors": []
      }
    ],
    "src": "49:865:36"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.9+commit.e5eed63a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-02-23T13:51:10.970Z",
  "devdoc": {
    "details": "This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A place for common modifiers and functions used by various NFTMarket mixins, if any.",
    "version": 1
  }
}